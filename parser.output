Nonterminals useless in grammar

   test
   program
   directives
   struct
   struct_vars
   function_dec
   var_dec_options1
   var_dec_single1
   var_s1


Terminals unused in grammar

   NUMBER
   ABS
   STATEMENT
   ANY
   CHARACTER_LITERAL
   INCLUDE
   DEFINE
   FUNC_NAME
   FUNC_DECL
   FUNC_PARAMS
   FUNC_DEF
   VAR_NAME
   STRUCT
   WHILE
   THEN
   SPACE
   UNSIGNED
   SIGNED
   VOID
   GOTO
   SIZEOF
   HASHS
   ALPHAS
   QUOTE
   "then"
   "else"


Rules useless in grammar

   77 test: %empty
   78     | test

   79 program: %empty
   80        | directives
   81        | program struct
   82        | program var_dec_single
   83        | program function_def

   84 directives: directives HASHS LT IDENTIFIER GT
   85           | %empty

   86 struct: %empty
   87       | struct STRUCT C_O struct_vars C_C

   88 struct_vars: %empty
   89            | struct_vars var_dec_single

   90 function_dec: DATATYPE IDENTIFIER B_O var_list_comma B_C EOL


Rules useless in parser due to conflicts

   14 var_list_comma: %empty


State 11 conflicts: 1 reduce/reduce
State 108 conflicts: 4 shift/reduce
State 109 conflicts: 4 shift/reduce
State 110 conflicts: 4 shift/reduce
State 111 conflicts: 4 shift/reduce


Grammar

    0 $accept: prog $end

    1 prog: program1

    2 program1: %empty
    3         | program1 var_dec_single
    4         | program1 function_def

    5 var_dec_single: DATATYPE var_dec_options

    6 var_dec_options: IDENTIFIER var_s EOL
    7                | IDENTIFIER ASSIGN literal var_s EOL

    8 var_s: %empty
    9      | COMMA IDENTIFIER var_s
   10      | COMMA IDENTIFIER ASSIGN literal var_s

   11 function_def: DATATYPE IDENTIFIER B_O var_list_comma B_C block

   12 var_list_comma: %empty
   13               | DATATYPE IDENTIFIER list_comma
   14               | %empty

   15 list_comma: %empty
   16           | COMMA DATATYPE IDENTIFIER list_comma

   17 param_list_comma_allow_blank: %empty
   18                             | param_list_comma

   19 param_list_comma: param_list_comma COMMA literal
   20                 | literal

   21 literal: FLOAT
   22        | INT
   23        | CHAR
   24        | STRING

   25 block: C_O block_code C_C

   26 block_code: %empty
   27           | var_dec_single block_code
   28           | assignment_statement EOL block_code
   29           | FOR B_O for_var_init EOL cond_allow_blank EOL assignment_blank B_C block block_code
   30           | IF B_O condition B_C block else_part block_code
   31           | CONTINUE EOL block_code
   32           | SWITCH B_O exp B_C C_O switch_block C_C block_code
   33           | BREAK EOL block_code
   34           | RETURN EOL block_code
   35           | func_call block_code

   36 func_call: IDENTIFIER B_O param_list_comma_allow_blank B_C EOL

   37 switch_block: CASE literal COLON block_code switch_block
   38             | DEFAULT COLON block_code
   39             | %empty

   40 else_part: %empty
   41          | ELSE IF B_O condition B_C block else_part
   42          | ELSE block

   43 for_var_init: %empty
   44             | IDENTIFIER ASSIGN literal
   45             | IDENTIFIER ASSIGN literal COMMA for_var_init

   46 assignment_blank: %empty
   47                 | assignment_allow_blank

   48 assignment_allow_blank: assignment_statement
   49                       | assignment_statement COMMA assignment_allow_blank

   50 assignment_statement: IDENTIFIER ASSIGN exp
   51                     | IDENTIFIER ADD ADD
   52                     | IDENTIFIER SUB SUB

   53 cond_allow_blank: %empty
   54                 | condition

   55 logical_oper: AND AND
   56             | OR OR

   57 condition: condition_one logical_oper condition_one
   58          | condition_one

   59 condition_one: exp condition_oper exp
   60              | operands

   61 exp: exp ADD exp
   62    | exp SUB exp
   63    | B_O exp B_C
   64    | pred2

   65 pred2: exp MUL exp
   66      | exp DIV exp
   67      | operands

   68 operands: IDENTIFIER
   69         | IDENTIFIER B_O param_list_comma_allow_blank B_C
   70         | literal

   71 condition_oper: ASSIGN ASSIGN
   72               | EXCLAIM ASSIGN
   73               | GT
   74               | LT
   75               | LT ASSIGN
   76               | GT ASSIGN


Terminals, with rules where they appear

$end (0) 0
error (256)
NUMBER (258)
ADD (259) 51 61
SUB (260) 52 62
MUL (261) 65
DIV (262) 66
ABS (263)
EOL (264) 6 7 28 29 31 33 34 36
STATEMENT (265)
IDENTIFIER (266) 6 7 9 10 11 13 16 36 44 45 50 51 52 68 69
ASSIGN (267) 7 10 44 45 50 71 72 75 76
ANY (268)
CHARACTER_LITERAL (269)
INCLUDE (270)
DEFINE (271)
DATATYPE (272) 5 11 13 16
FUNC_NAME (273)
FUNC_DECL (274)
FUNC_PARAMS (275)
FUNC_DEF (276)
VAR_NAME (277)
COMMA (278) 9 10 16 19 45 49
C_O (279) 25 32
C_C (280) 25 32
B_O (281) 11 29 30 32 36 41 63 69
B_C (282) 11 29 30 32 36 41 63 69
CHAR (283) 23
FLOAT (284) 21
INT (285) 22
AND (286) 55
OR (287) 56
STRUCT (288)
FOR (289) 29
WHILE (290)
IF (291) 30 41
THEN (292)
ELSE (293) 41 42
RETURN (294) 34
BREAK (295) 33
SWITCH (296) 32
EXCLAIM (297) 72
CASE (298) 37
SPACE (299)
UNSIGNED (300)
CONTINUE (301) 31
SIGNED (302)
VOID (303)
DEFAULT (304) 38
GOTO (305)
SIZEOF (306)
GT (307) 73 76
LT (308) 74 75
COLON (309) 37 38
HASHS (310)
STRING (311) 24
ALPHAS (312)
QUOTE (313)
"then" (314)
"else" (315)


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
prog (62)
    on left: 1, on right: 0
program1 (63)
    on left: 2 3 4, on right: 1 3 4
var_dec_single (64)
    on left: 5, on right: 3 27
var_dec_options (65)
    on left: 6 7, on right: 5
var_s (66)
    on left: 8 9 10, on right: 6 7 9 10
function_def (67)
    on left: 11, on right: 4
var_list_comma (68)
    on left: 12 13 14, on right: 11
list_comma (69)
    on left: 15 16, on right: 13 16
param_list_comma_allow_blank (70)
    on left: 17 18, on right: 36 69
param_list_comma (71)
    on left: 19 20, on right: 18 19
literal (72)
    on left: 21 22 23 24, on right: 7 10 19 20 37 44 45 70
block (73)
    on left: 25, on right: 11 29 30 41 42
block_code (74)
    on left: 26 27 28 29 30 31 32 33 34 35, on right: 25 27 28 29 30
    31 32 33 34 35 37 38
func_call (75)
    on left: 36, on right: 35
switch_block (76)
    on left: 37 38 39, on right: 32 37
else_part (77)
    on left: 40 41 42, on right: 30 41
for_var_init (78)
    on left: 43 44 45, on right: 29 45
assignment_blank (79)
    on left: 46 47, on right: 29
assignment_allow_blank (80)
    on left: 48 49, on right: 47 49
assignment_statement (81)
    on left: 50 51 52, on right: 28 48 49
cond_allow_blank (82)
    on left: 53 54, on right: 29
logical_oper (83)
    on left: 55 56, on right: 57
condition (84)
    on left: 57 58, on right: 30 41 54
condition_one (85)
    on left: 59 60, on right: 57 58
exp (86)
    on left: 61 62 63 64, on right: 32 50 59 61 62 63 65 66
pred2 (87)
    on left: 65 66 67, on right: 64
operands (88)
    on left: 68 69 70, on right: 60 67
condition_oper (89)
    on left: 71 72 73 74 75 76, on right: 59


State 0

    0 $accept: . prog $end

    $default  reduce using rule 2 (program1)

    prog      go to state 1
    program1  go to state 2


State 1

    0 $accept: prog . $end

    $end  shift, and go to state 3


State 2

    1 prog: program1 .
    3 program1: program1 . var_dec_single
    4         | program1 . function_def

    DATATYPE  shift, and go to state 4

    $default  reduce using rule 1 (prog)

    var_dec_single  go to state 5
    function_def    go to state 6


State 3

    0 $accept: prog $end .

    $default  accept


State 4

    5 var_dec_single: DATATYPE . var_dec_options
   11 function_def: DATATYPE . IDENTIFIER B_O var_list_comma B_C block

    IDENTIFIER  shift, and go to state 7

    var_dec_options  go to state 8


State 5

    3 program1: program1 var_dec_single .

    $default  reduce using rule 3 (program1)


State 6

    4 program1: program1 function_def .

    $default  reduce using rule 4 (program1)


State 7

    6 var_dec_options: IDENTIFIER . var_s EOL
    7                | IDENTIFIER . ASSIGN literal var_s EOL
   11 function_def: DATATYPE IDENTIFIER . B_O var_list_comma B_C block

    ASSIGN  shift, and go to state 9
    COMMA   shift, and go to state 10
    B_O     shift, and go to state 11

    $default  reduce using rule 8 (var_s)

    var_s  go to state 12


State 8

    5 var_dec_single: DATATYPE var_dec_options .

    $default  reduce using rule 5 (var_dec_single)


State 9

    7 var_dec_options: IDENTIFIER ASSIGN . literal var_s EOL

    CHAR    shift, and go to state 13
    FLOAT   shift, and go to state 14
    INT     shift, and go to state 15
    STRING  shift, and go to state 16

    literal  go to state 17


State 10

    9 var_s: COMMA . IDENTIFIER var_s
   10      | COMMA . IDENTIFIER ASSIGN literal var_s

    IDENTIFIER  shift, and go to state 18


State 11

   11 function_def: DATATYPE IDENTIFIER B_O . var_list_comma B_C block

    DATATYPE  shift, and go to state 19

    B_C       reduce using rule 12 (var_list_comma)
    B_C       [reduce using rule 14 (var_list_comma)]
    $default  reduce using rule 12 (var_list_comma)

    var_list_comma  go to state 20


State 12

    6 var_dec_options: IDENTIFIER var_s . EOL

    EOL  shift, and go to state 21


State 13

   23 literal: CHAR .

    $default  reduce using rule 23 (literal)


State 14

   21 literal: FLOAT .

    $default  reduce using rule 21 (literal)


State 15

   22 literal: INT .

    $default  reduce using rule 22 (literal)


State 16

   24 literal: STRING .

    $default  reduce using rule 24 (literal)


State 17

    7 var_dec_options: IDENTIFIER ASSIGN literal . var_s EOL

    COMMA  shift, and go to state 10

    $default  reduce using rule 8 (var_s)

    var_s  go to state 22


State 18

    9 var_s: COMMA IDENTIFIER . var_s
   10      | COMMA IDENTIFIER . ASSIGN literal var_s

    ASSIGN  shift, and go to state 23
    COMMA   shift, and go to state 10

    $default  reduce using rule 8 (var_s)

    var_s  go to state 24


State 19

   13 var_list_comma: DATATYPE . IDENTIFIER list_comma

    IDENTIFIER  shift, and go to state 25


State 20

   11 function_def: DATATYPE IDENTIFIER B_O var_list_comma . B_C block

    B_C  shift, and go to state 26


State 21

    6 var_dec_options: IDENTIFIER var_s EOL .

    $default  reduce using rule 6 (var_dec_options)


State 22

    7 var_dec_options: IDENTIFIER ASSIGN literal var_s . EOL

    EOL  shift, and go to state 27


State 23

   10 var_s: COMMA IDENTIFIER ASSIGN . literal var_s

    CHAR    shift, and go to state 13
    FLOAT   shift, and go to state 14
    INT     shift, and go to state 15
    STRING  shift, and go to state 16

    literal  go to state 28


State 24

    9 var_s: COMMA IDENTIFIER var_s .

    $default  reduce using rule 9 (var_s)


State 25

   13 var_list_comma: DATATYPE IDENTIFIER . list_comma

    COMMA  shift, and go to state 29

    $default  reduce using rule 15 (list_comma)

    list_comma  go to state 30


State 26

   11 function_def: DATATYPE IDENTIFIER B_O var_list_comma B_C . block

    C_O  shift, and go to state 31

    block  go to state 32


State 27

    7 var_dec_options: IDENTIFIER ASSIGN literal var_s EOL .

    $default  reduce using rule 7 (var_dec_options)


State 28

   10 var_s: COMMA IDENTIFIER ASSIGN literal . var_s

    COMMA  shift, and go to state 10

    $default  reduce using rule 8 (var_s)

    var_s  go to state 33


State 29

   16 list_comma: COMMA . DATATYPE IDENTIFIER list_comma

    DATATYPE  shift, and go to state 34


State 30

   13 var_list_comma: DATATYPE IDENTIFIER list_comma .

    $default  reduce using rule 13 (var_list_comma)


State 31

   25 block: C_O . block_code C_C

    IDENTIFIER  shift, and go to state 35
    DATATYPE    shift, and go to state 36
    FOR         shift, and go to state 37
    IF          shift, and go to state 38
    RETURN      shift, and go to state 39
    BREAK       shift, and go to state 40
    SWITCH      shift, and go to state 41
    CONTINUE    shift, and go to state 42

    $default  reduce using rule 26 (block_code)

    var_dec_single        go to state 43
    block_code            go to state 44
    func_call             go to state 45
    assignment_statement  go to state 46


State 32

   11 function_def: DATATYPE IDENTIFIER B_O var_list_comma B_C block .

    $default  reduce using rule 11 (function_def)


State 33

   10 var_s: COMMA IDENTIFIER ASSIGN literal var_s .

    $default  reduce using rule 10 (var_s)


State 34

   16 list_comma: COMMA DATATYPE . IDENTIFIER list_comma

    IDENTIFIER  shift, and go to state 47


State 35

   36 func_call: IDENTIFIER . B_O param_list_comma_allow_blank B_C EOL
   50 assignment_statement: IDENTIFIER . ASSIGN exp
   51                     | IDENTIFIER . ADD ADD
   52                     | IDENTIFIER . SUB SUB

    ADD     shift, and go to state 48
    SUB     shift, and go to state 49
    ASSIGN  shift, and go to state 50
    B_O     shift, and go to state 51


State 36

    5 var_dec_single: DATATYPE . var_dec_options

    IDENTIFIER  shift, and go to state 52

    var_dec_options  go to state 8


State 37

   29 block_code: FOR . B_O for_var_init EOL cond_allow_blank EOL assignment_blank B_C block block_code

    B_O  shift, and go to state 53


State 38

   30 block_code: IF . B_O condition B_C block else_part block_code

    B_O  shift, and go to state 54


State 39

   34 block_code: RETURN . EOL block_code

    EOL  shift, and go to state 55


State 40

   33 block_code: BREAK . EOL block_code

    EOL  shift, and go to state 56


State 41

   32 block_code: SWITCH . B_O exp B_C C_O switch_block C_C block_code

    B_O  shift, and go to state 57


State 42

   31 block_code: CONTINUE . EOL block_code

    EOL  shift, and go to state 58


State 43

   27 block_code: var_dec_single . block_code

    IDENTIFIER  shift, and go to state 35
    DATATYPE    shift, and go to state 36
    FOR         shift, and go to state 37
    IF          shift, and go to state 38
    RETURN      shift, and go to state 39
    BREAK       shift, and go to state 40
    SWITCH      shift, and go to state 41
    CONTINUE    shift, and go to state 42

    $default  reduce using rule 26 (block_code)

    var_dec_single        go to state 43
    block_code            go to state 59
    func_call             go to state 45
    assignment_statement  go to state 46


State 44

   25 block: C_O block_code . C_C

    C_C  shift, and go to state 60


State 45

   35 block_code: func_call . block_code

    IDENTIFIER  shift, and go to state 35
    DATATYPE    shift, and go to state 36
    FOR         shift, and go to state 37
    IF          shift, and go to state 38
    RETURN      shift, and go to state 39
    BREAK       shift, and go to state 40
    SWITCH      shift, and go to state 41
    CONTINUE    shift, and go to state 42

    $default  reduce using rule 26 (block_code)

    var_dec_single        go to state 43
    block_code            go to state 61
    func_call             go to state 45
    assignment_statement  go to state 46


State 46

   28 block_code: assignment_statement . EOL block_code

    EOL  shift, and go to state 62


State 47

   16 list_comma: COMMA DATATYPE IDENTIFIER . list_comma

    COMMA  shift, and go to state 29

    $default  reduce using rule 15 (list_comma)

    list_comma  go to state 63


State 48

   51 assignment_statement: IDENTIFIER ADD . ADD

    ADD  shift, and go to state 64


State 49

   52 assignment_statement: IDENTIFIER SUB . SUB

    SUB  shift, and go to state 65


State 50

   50 assignment_statement: IDENTIFIER ASSIGN . exp

    IDENTIFIER  shift, and go to state 66
    B_O         shift, and go to state 67
    CHAR        shift, and go to state 13
    FLOAT       shift, and go to state 14
    INT         shift, and go to state 15
    STRING      shift, and go to state 16

    literal   go to state 68
    exp       go to state 69
    pred2     go to state 70
    operands  go to state 71


State 51

   36 func_call: IDENTIFIER B_O . param_list_comma_allow_blank B_C EOL

    CHAR    shift, and go to state 13
    FLOAT   shift, and go to state 14
    INT     shift, and go to state 15
    STRING  shift, and go to state 16

    $default  reduce using rule 17 (param_list_comma_allow_blank)

    param_list_comma_allow_blank  go to state 72
    param_list_comma              go to state 73
    literal                       go to state 74


State 52

    6 var_dec_options: IDENTIFIER . var_s EOL
    7                | IDENTIFIER . ASSIGN literal var_s EOL

    ASSIGN  shift, and go to state 9
    COMMA   shift, and go to state 10

    $default  reduce using rule 8 (var_s)

    var_s  go to state 12


State 53

   29 block_code: FOR B_O . for_var_init EOL cond_allow_blank EOL assignment_blank B_C block block_code

    IDENTIFIER  shift, and go to state 75

    $default  reduce using rule 43 (for_var_init)

    for_var_init  go to state 76


State 54

   30 block_code: IF B_O . condition B_C block else_part block_code

    IDENTIFIER  shift, and go to state 66
    B_O         shift, and go to state 67
    CHAR        shift, and go to state 13
    FLOAT       shift, and go to state 14
    INT         shift, and go to state 15
    STRING      shift, and go to state 16

    literal        go to state 68
    condition      go to state 77
    condition_one  go to state 78
    exp            go to state 79
    pred2          go to state 70
    operands       go to state 80


State 55

   34 block_code: RETURN EOL . block_code

    IDENTIFIER  shift, and go to state 35
    DATATYPE    shift, and go to state 36
    FOR         shift, and go to state 37
    IF          shift, and go to state 38
    RETURN      shift, and go to state 39
    BREAK       shift, and go to state 40
    SWITCH      shift, and go to state 41
    CONTINUE    shift, and go to state 42

    $default  reduce using rule 26 (block_code)

    var_dec_single        go to state 43
    block_code            go to state 81
    func_call             go to state 45
    assignment_statement  go to state 46


State 56

   33 block_code: BREAK EOL . block_code

    IDENTIFIER  shift, and go to state 35
    DATATYPE    shift, and go to state 36
    FOR         shift, and go to state 37
    IF          shift, and go to state 38
    RETURN      shift, and go to state 39
    BREAK       shift, and go to state 40
    SWITCH      shift, and go to state 41
    CONTINUE    shift, and go to state 42

    $default  reduce using rule 26 (block_code)

    var_dec_single        go to state 43
    block_code            go to state 82
    func_call             go to state 45
    assignment_statement  go to state 46


State 57

   32 block_code: SWITCH B_O . exp B_C C_O switch_block C_C block_code

    IDENTIFIER  shift, and go to state 66
    B_O         shift, and go to state 67
    CHAR        shift, and go to state 13
    FLOAT       shift, and go to state 14
    INT         shift, and go to state 15
    STRING      shift, and go to state 16

    literal   go to state 68
    exp       go to state 83
    pred2     go to state 70
    operands  go to state 71


State 58

   31 block_code: CONTINUE EOL . block_code

    IDENTIFIER  shift, and go to state 35
    DATATYPE    shift, and go to state 36
    FOR         shift, and go to state 37
    IF          shift, and go to state 38
    RETURN      shift, and go to state 39
    BREAK       shift, and go to state 40
    SWITCH      shift, and go to state 41
    CONTINUE    shift, and go to state 42

    $default  reduce using rule 26 (block_code)

    var_dec_single        go to state 43
    block_code            go to state 84
    func_call             go to state 45
    assignment_statement  go to state 46


State 59

   27 block_code: var_dec_single block_code .

    $default  reduce using rule 27 (block_code)


State 60

   25 block: C_O block_code C_C .

    $default  reduce using rule 25 (block)


State 61

   35 block_code: func_call block_code .

    $default  reduce using rule 35 (block_code)


State 62

   28 block_code: assignment_statement EOL . block_code

    IDENTIFIER  shift, and go to state 35
    DATATYPE    shift, and go to state 36
    FOR         shift, and go to state 37
    IF          shift, and go to state 38
    RETURN      shift, and go to state 39
    BREAK       shift, and go to state 40
    SWITCH      shift, and go to state 41
    CONTINUE    shift, and go to state 42

    $default  reduce using rule 26 (block_code)

    var_dec_single        go to state 43
    block_code            go to state 85
    func_call             go to state 45
    assignment_statement  go to state 46


State 63

   16 list_comma: COMMA DATATYPE IDENTIFIER list_comma .

    $default  reduce using rule 16 (list_comma)


State 64

   51 assignment_statement: IDENTIFIER ADD ADD .

    $default  reduce using rule 51 (assignment_statement)


State 65

   52 assignment_statement: IDENTIFIER SUB SUB .

    $default  reduce using rule 52 (assignment_statement)


State 66

   68 operands: IDENTIFIER .
   69         | IDENTIFIER . B_O param_list_comma_allow_blank B_C

    B_O  shift, and go to state 86

    $default  reduce using rule 68 (operands)


State 67

   63 exp: B_O . exp B_C

    IDENTIFIER  shift, and go to state 66
    B_O         shift, and go to state 67
    CHAR        shift, and go to state 13
    FLOAT       shift, and go to state 14
    INT         shift, and go to state 15
    STRING      shift, and go to state 16

    literal   go to state 68
    exp       go to state 87
    pred2     go to state 70
    operands  go to state 71


State 68

   70 operands: literal .

    $default  reduce using rule 70 (operands)


State 69

   50 assignment_statement: IDENTIFIER ASSIGN exp .
   61 exp: exp . ADD exp
   62    | exp . SUB exp
   65 pred2: exp . MUL exp
   66      | exp . DIV exp

    ADD  shift, and go to state 88
    SUB  shift, and go to state 89
    MUL  shift, and go to state 90
    DIV  shift, and go to state 91

    $default  reduce using rule 50 (assignment_statement)


State 70

   64 exp: pred2 .

    $default  reduce using rule 64 (exp)


State 71

   67 pred2: operands .

    $default  reduce using rule 67 (pred2)


State 72

   36 func_call: IDENTIFIER B_O param_list_comma_allow_blank . B_C EOL

    B_C  shift, and go to state 92


State 73

   18 param_list_comma_allow_blank: param_list_comma .
   19 param_list_comma: param_list_comma . COMMA literal

    COMMA  shift, and go to state 93

    $default  reduce using rule 18 (param_list_comma_allow_blank)


State 74

   20 param_list_comma: literal .

    $default  reduce using rule 20 (param_list_comma)


State 75

   44 for_var_init: IDENTIFIER . ASSIGN literal
   45             | IDENTIFIER . ASSIGN literal COMMA for_var_init

    ASSIGN  shift, and go to state 94


State 76

   29 block_code: FOR B_O for_var_init . EOL cond_allow_blank EOL assignment_blank B_C block block_code

    EOL  shift, and go to state 95


State 77

   30 block_code: IF B_O condition . B_C block else_part block_code

    B_C  shift, and go to state 96


State 78

   57 condition: condition_one . logical_oper condition_one
   58          | condition_one .

    AND  shift, and go to state 97
    OR   shift, and go to state 98

    $default  reduce using rule 58 (condition)

    logical_oper  go to state 99


State 79

   59 condition_one: exp . condition_oper exp
   61 exp: exp . ADD exp
   62    | exp . SUB exp
   65 pred2: exp . MUL exp
   66      | exp . DIV exp

    ADD      shift, and go to state 88
    SUB      shift, and go to state 89
    MUL      shift, and go to state 90
    DIV      shift, and go to state 91
    ASSIGN   shift, and go to state 100
    EXCLAIM  shift, and go to state 101
    GT       shift, and go to state 102
    LT       shift, and go to state 103

    condition_oper  go to state 104


State 80

   60 condition_one: operands .
   67 pred2: operands .

    EOL       reduce using rule 60 (condition_one)
    B_C       reduce using rule 60 (condition_one)
    AND       reduce using rule 60 (condition_one)
    OR        reduce using rule 60 (condition_one)
    $default  reduce using rule 67 (pred2)


State 81

   34 block_code: RETURN EOL block_code .

    $default  reduce using rule 34 (block_code)


State 82

   33 block_code: BREAK EOL block_code .

    $default  reduce using rule 33 (block_code)


State 83

   32 block_code: SWITCH B_O exp . B_C C_O switch_block C_C block_code
   61 exp: exp . ADD exp
   62    | exp . SUB exp
   65 pred2: exp . MUL exp
   66      | exp . DIV exp

    ADD  shift, and go to state 88
    SUB  shift, and go to state 89
    MUL  shift, and go to state 90
    DIV  shift, and go to state 91
    B_C  shift, and go to state 105


State 84

   31 block_code: CONTINUE EOL block_code .

    $default  reduce using rule 31 (block_code)


State 85

   28 block_code: assignment_statement EOL block_code .

    $default  reduce using rule 28 (block_code)


State 86

   69 operands: IDENTIFIER B_O . param_list_comma_allow_blank B_C

    CHAR    shift, and go to state 13
    FLOAT   shift, and go to state 14
    INT     shift, and go to state 15
    STRING  shift, and go to state 16

    $default  reduce using rule 17 (param_list_comma_allow_blank)

    param_list_comma_allow_blank  go to state 106
    param_list_comma              go to state 73
    literal                       go to state 74


State 87

   61 exp: exp . ADD exp
   62    | exp . SUB exp
   63    | B_O exp . B_C
   65 pred2: exp . MUL exp
   66      | exp . DIV exp

    ADD  shift, and go to state 88
    SUB  shift, and go to state 89
    MUL  shift, and go to state 90
    DIV  shift, and go to state 91
    B_C  shift, and go to state 107


State 88

   61 exp: exp ADD . exp

    IDENTIFIER  shift, and go to state 66
    B_O         shift, and go to state 67
    CHAR        shift, and go to state 13
    FLOAT       shift, and go to state 14
    INT         shift, and go to state 15
    STRING      shift, and go to state 16

    literal   go to state 68
    exp       go to state 108
    pred2     go to state 70
    operands  go to state 71


State 89

   62 exp: exp SUB . exp

    IDENTIFIER  shift, and go to state 66
    B_O         shift, and go to state 67
    CHAR        shift, and go to state 13
    FLOAT       shift, and go to state 14
    INT         shift, and go to state 15
    STRING      shift, and go to state 16

    literal   go to state 68
    exp       go to state 109
    pred2     go to state 70
    operands  go to state 71


State 90

   65 pred2: exp MUL . exp

    IDENTIFIER  shift, and go to state 66
    B_O         shift, and go to state 67
    CHAR        shift, and go to state 13
    FLOAT       shift, and go to state 14
    INT         shift, and go to state 15
    STRING      shift, and go to state 16

    literal   go to state 68
    exp       go to state 110
    pred2     go to state 70
    operands  go to state 71


State 91

   66 pred2: exp DIV . exp

    IDENTIFIER  shift, and go to state 66
    B_O         shift, and go to state 67
    CHAR        shift, and go to state 13
    FLOAT       shift, and go to state 14
    INT         shift, and go to state 15
    STRING      shift, and go to state 16

    literal   go to state 68
    exp       go to state 111
    pred2     go to state 70
    operands  go to state 71


State 92

   36 func_call: IDENTIFIER B_O param_list_comma_allow_blank B_C . EOL

    EOL  shift, and go to state 112


State 93

   19 param_list_comma: param_list_comma COMMA . literal

    CHAR    shift, and go to state 13
    FLOAT   shift, and go to state 14
    INT     shift, and go to state 15
    STRING  shift, and go to state 16

    literal  go to state 113


State 94

   44 for_var_init: IDENTIFIER ASSIGN . literal
   45             | IDENTIFIER ASSIGN . literal COMMA for_var_init

    CHAR    shift, and go to state 13
    FLOAT   shift, and go to state 14
    INT     shift, and go to state 15
    STRING  shift, and go to state 16

    literal  go to state 114


State 95

   29 block_code: FOR B_O for_var_init EOL . cond_allow_blank EOL assignment_blank B_C block block_code

    IDENTIFIER  shift, and go to state 66
    B_O         shift, and go to state 67
    CHAR        shift, and go to state 13
    FLOAT       shift, and go to state 14
    INT         shift, and go to state 15
    STRING      shift, and go to state 16

    $default  reduce using rule 53 (cond_allow_blank)

    literal           go to state 68
    cond_allow_blank  go to state 115
    condition         go to state 116
    condition_one     go to state 78
    exp               go to state 79
    pred2             go to state 70
    operands          go to state 80


State 96

   30 block_code: IF B_O condition B_C . block else_part block_code

    C_O  shift, and go to state 31

    block  go to state 117


State 97

   55 logical_oper: AND . AND

    AND  shift, and go to state 118


State 98

   56 logical_oper: OR . OR

    OR  shift, and go to state 119


State 99

   57 condition: condition_one logical_oper . condition_one

    IDENTIFIER  shift, and go to state 66
    B_O         shift, and go to state 67
    CHAR        shift, and go to state 13
    FLOAT       shift, and go to state 14
    INT         shift, and go to state 15
    STRING      shift, and go to state 16

    literal        go to state 68
    condition_one  go to state 120
    exp            go to state 79
    pred2          go to state 70
    operands       go to state 80


State 100

   71 condition_oper: ASSIGN . ASSIGN

    ASSIGN  shift, and go to state 121


State 101

   72 condition_oper: EXCLAIM . ASSIGN

    ASSIGN  shift, and go to state 122


State 102

   73 condition_oper: GT .
   76               | GT . ASSIGN

    ASSIGN  shift, and go to state 123

    $default  reduce using rule 73 (condition_oper)


State 103

   74 condition_oper: LT .
   75               | LT . ASSIGN

    ASSIGN  shift, and go to state 124

    $default  reduce using rule 74 (condition_oper)


State 104

   59 condition_one: exp condition_oper . exp

    IDENTIFIER  shift, and go to state 66
    B_O         shift, and go to state 67
    CHAR        shift, and go to state 13
    FLOAT       shift, and go to state 14
    INT         shift, and go to state 15
    STRING      shift, and go to state 16

    literal   go to state 68
    exp       go to state 125
    pred2     go to state 70
    operands  go to state 71


State 105

   32 block_code: SWITCH B_O exp B_C . C_O switch_block C_C block_code

    C_O  shift, and go to state 126


State 106

   69 operands: IDENTIFIER B_O param_list_comma_allow_blank . B_C

    B_C  shift, and go to state 127


State 107

   63 exp: B_O exp B_C .

    $default  reduce using rule 63 (exp)


State 108

   61 exp: exp . ADD exp
   61    | exp ADD exp .
   62    | exp . SUB exp
   65 pred2: exp . MUL exp
   66      | exp . DIV exp

    ADD  shift, and go to state 88
    SUB  shift, and go to state 89
    MUL  shift, and go to state 90
    DIV  shift, and go to state 91

    ADD       [reduce using rule 61 (exp)]
    SUB       [reduce using rule 61 (exp)]
    MUL       [reduce using rule 61 (exp)]
    DIV       [reduce using rule 61 (exp)]
    $default  reduce using rule 61 (exp)


State 109

   61 exp: exp . ADD exp
   62    | exp . SUB exp
   62    | exp SUB exp .
   65 pred2: exp . MUL exp
   66      | exp . DIV exp

    ADD  shift, and go to state 88
    SUB  shift, and go to state 89
    MUL  shift, and go to state 90
    DIV  shift, and go to state 91

    ADD       [reduce using rule 62 (exp)]
    SUB       [reduce using rule 62 (exp)]
    MUL       [reduce using rule 62 (exp)]
    DIV       [reduce using rule 62 (exp)]
    $default  reduce using rule 62 (exp)


State 110

   61 exp: exp . ADD exp
   62    | exp . SUB exp
   65 pred2: exp . MUL exp
   65      | exp MUL exp .
   66      | exp . DIV exp

    ADD  shift, and go to state 88
    SUB  shift, and go to state 89
    MUL  shift, and go to state 90
    DIV  shift, and go to state 91

    ADD       [reduce using rule 65 (pred2)]
    SUB       [reduce using rule 65 (pred2)]
    MUL       [reduce using rule 65 (pred2)]
    DIV       [reduce using rule 65 (pred2)]
    $default  reduce using rule 65 (pred2)


State 111

   61 exp: exp . ADD exp
   62    | exp . SUB exp
   65 pred2: exp . MUL exp
   66      | exp . DIV exp
   66      | exp DIV exp .

    ADD  shift, and go to state 88
    SUB  shift, and go to state 89
    MUL  shift, and go to state 90
    DIV  shift, and go to state 91

    ADD       [reduce using rule 66 (pred2)]
    SUB       [reduce using rule 66 (pred2)]
    MUL       [reduce using rule 66 (pred2)]
    DIV       [reduce using rule 66 (pred2)]
    $default  reduce using rule 66 (pred2)


State 112

   36 func_call: IDENTIFIER B_O param_list_comma_allow_blank B_C EOL .

    $default  reduce using rule 36 (func_call)


State 113

   19 param_list_comma: param_list_comma COMMA literal .

    $default  reduce using rule 19 (param_list_comma)


State 114

   44 for_var_init: IDENTIFIER ASSIGN literal .
   45             | IDENTIFIER ASSIGN literal . COMMA for_var_init

    COMMA  shift, and go to state 128

    $default  reduce using rule 44 (for_var_init)


State 115

   29 block_code: FOR B_O for_var_init EOL cond_allow_blank . EOL assignment_blank B_C block block_code

    EOL  shift, and go to state 129


State 116

   54 cond_allow_blank: condition .

    $default  reduce using rule 54 (cond_allow_blank)


State 117

   30 block_code: IF B_O condition B_C block . else_part block_code

    ELSE  shift, and go to state 130

    $default  reduce using rule 40 (else_part)

    else_part  go to state 131


State 118

   55 logical_oper: AND AND .

    $default  reduce using rule 55 (logical_oper)


State 119

   56 logical_oper: OR OR .

    $default  reduce using rule 56 (logical_oper)


State 120

   57 condition: condition_one logical_oper condition_one .

    $default  reduce using rule 57 (condition)


State 121

   71 condition_oper: ASSIGN ASSIGN .

    $default  reduce using rule 71 (condition_oper)


State 122

   72 condition_oper: EXCLAIM ASSIGN .

    $default  reduce using rule 72 (condition_oper)


State 123

   76 condition_oper: GT ASSIGN .

    $default  reduce using rule 76 (condition_oper)


State 124

   75 condition_oper: LT ASSIGN .

    $default  reduce using rule 75 (condition_oper)


State 125

   59 condition_one: exp condition_oper exp .
   61 exp: exp . ADD exp
   62    | exp . SUB exp
   65 pred2: exp . MUL exp
   66      | exp . DIV exp

    ADD  shift, and go to state 88
    SUB  shift, and go to state 89
    MUL  shift, and go to state 90
    DIV  shift, and go to state 91

    $default  reduce using rule 59 (condition_one)


State 126

   32 block_code: SWITCH B_O exp B_C C_O . switch_block C_C block_code

    CASE     shift, and go to state 132
    DEFAULT  shift, and go to state 133

    $default  reduce using rule 39 (switch_block)

    switch_block  go to state 134


State 127

   69 operands: IDENTIFIER B_O param_list_comma_allow_blank B_C .

    $default  reduce using rule 69 (operands)


State 128

   45 for_var_init: IDENTIFIER ASSIGN literal COMMA . for_var_init

    IDENTIFIER  shift, and go to state 75

    $default  reduce using rule 43 (for_var_init)

    for_var_init  go to state 135


State 129

   29 block_code: FOR B_O for_var_init EOL cond_allow_blank EOL . assignment_blank B_C block block_code

    IDENTIFIER  shift, and go to state 136

    $default  reduce using rule 46 (assignment_blank)

    assignment_blank        go to state 137
    assignment_allow_blank  go to state 138
    assignment_statement    go to state 139


State 130

   41 else_part: ELSE . IF B_O condition B_C block else_part
   42          | ELSE . block

    C_O  shift, and go to state 31
    IF   shift, and go to state 140

    block  go to state 141


State 131

   30 block_code: IF B_O condition B_C block else_part . block_code

    IDENTIFIER  shift, and go to state 35
    DATATYPE    shift, and go to state 36
    FOR         shift, and go to state 37
    IF          shift, and go to state 38
    RETURN      shift, and go to state 39
    BREAK       shift, and go to state 40
    SWITCH      shift, and go to state 41
    CONTINUE    shift, and go to state 42

    $default  reduce using rule 26 (block_code)

    var_dec_single        go to state 43
    block_code            go to state 142
    func_call             go to state 45
    assignment_statement  go to state 46


State 132

   37 switch_block: CASE . literal COLON block_code switch_block

    CHAR    shift, and go to state 13
    FLOAT   shift, and go to state 14
    INT     shift, and go to state 15
    STRING  shift, and go to state 16

    literal  go to state 143


State 133

   38 switch_block: DEFAULT . COLON block_code

    COLON  shift, and go to state 144


State 134

   32 block_code: SWITCH B_O exp B_C C_O switch_block . C_C block_code

    C_C  shift, and go to state 145


State 135

   45 for_var_init: IDENTIFIER ASSIGN literal COMMA for_var_init .

    $default  reduce using rule 45 (for_var_init)


State 136

   50 assignment_statement: IDENTIFIER . ASSIGN exp
   51                     | IDENTIFIER . ADD ADD
   52                     | IDENTIFIER . SUB SUB

    ADD     shift, and go to state 48
    SUB     shift, and go to state 49
    ASSIGN  shift, and go to state 50


State 137

   29 block_code: FOR B_O for_var_init EOL cond_allow_blank EOL assignment_blank . B_C block block_code

    B_C  shift, and go to state 146


State 138

   47 assignment_blank: assignment_allow_blank .

    $default  reduce using rule 47 (assignment_blank)


State 139

   48 assignment_allow_blank: assignment_statement .
   49                       | assignment_statement . COMMA assignment_allow_blank

    COMMA  shift, and go to state 147

    $default  reduce using rule 48 (assignment_allow_blank)


State 140

   41 else_part: ELSE IF . B_O condition B_C block else_part

    B_O  shift, and go to state 148


State 141

   42 else_part: ELSE block .

    $default  reduce using rule 42 (else_part)


State 142

   30 block_code: IF B_O condition B_C block else_part block_code .

    $default  reduce using rule 30 (block_code)


State 143

   37 switch_block: CASE literal . COLON block_code switch_block

    COLON  shift, and go to state 149


State 144

   38 switch_block: DEFAULT COLON . block_code

    IDENTIFIER  shift, and go to state 35
    DATATYPE    shift, and go to state 36
    FOR         shift, and go to state 37
    IF          shift, and go to state 38
    RETURN      shift, and go to state 39
    BREAK       shift, and go to state 40
    SWITCH      shift, and go to state 41
    CONTINUE    shift, and go to state 42

    $default  reduce using rule 26 (block_code)

    var_dec_single        go to state 43
    block_code            go to state 150
    func_call             go to state 45
    assignment_statement  go to state 46


State 145

   32 block_code: SWITCH B_O exp B_C C_O switch_block C_C . block_code

    IDENTIFIER  shift, and go to state 35
    DATATYPE    shift, and go to state 36
    FOR         shift, and go to state 37
    IF          shift, and go to state 38
    RETURN      shift, and go to state 39
    BREAK       shift, and go to state 40
    SWITCH      shift, and go to state 41
    CONTINUE    shift, and go to state 42

    $default  reduce using rule 26 (block_code)

    var_dec_single        go to state 43
    block_code            go to state 151
    func_call             go to state 45
    assignment_statement  go to state 46


State 146

   29 block_code: FOR B_O for_var_init EOL cond_allow_blank EOL assignment_blank B_C . block block_code

    C_O  shift, and go to state 31

    block  go to state 152


State 147

   49 assignment_allow_blank: assignment_statement COMMA . assignment_allow_blank

    IDENTIFIER  shift, and go to state 136

    assignment_allow_blank  go to state 153
    assignment_statement    go to state 139


State 148

   41 else_part: ELSE IF B_O . condition B_C block else_part

    IDENTIFIER  shift, and go to state 66
    B_O         shift, and go to state 67
    CHAR        shift, and go to state 13
    FLOAT       shift, and go to state 14
    INT         shift, and go to state 15
    STRING      shift, and go to state 16

    literal        go to state 68
    condition      go to state 154
    condition_one  go to state 78
    exp            go to state 79
    pred2          go to state 70
    operands       go to state 80


State 149

   37 switch_block: CASE literal COLON . block_code switch_block

    IDENTIFIER  shift, and go to state 35
    DATATYPE    shift, and go to state 36
    FOR         shift, and go to state 37
    IF          shift, and go to state 38
    RETURN      shift, and go to state 39
    BREAK       shift, and go to state 40
    SWITCH      shift, and go to state 41
    CONTINUE    shift, and go to state 42

    $default  reduce using rule 26 (block_code)

    var_dec_single        go to state 43
    block_code            go to state 155
    func_call             go to state 45
    assignment_statement  go to state 46


State 150

   38 switch_block: DEFAULT COLON block_code .

    $default  reduce using rule 38 (switch_block)


State 151

   32 block_code: SWITCH B_O exp B_C C_O switch_block C_C block_code .

    $default  reduce using rule 32 (block_code)


State 152

   29 block_code: FOR B_O for_var_init EOL cond_allow_blank EOL assignment_blank B_C block . block_code

    IDENTIFIER  shift, and go to state 35
    DATATYPE    shift, and go to state 36
    FOR         shift, and go to state 37
    IF          shift, and go to state 38
    RETURN      shift, and go to state 39
    BREAK       shift, and go to state 40
    SWITCH      shift, and go to state 41
    CONTINUE    shift, and go to state 42

    $default  reduce using rule 26 (block_code)

    var_dec_single        go to state 43
    block_code            go to state 156
    func_call             go to state 45
    assignment_statement  go to state 46


State 153

   49 assignment_allow_blank: assignment_statement COMMA assignment_allow_blank .

    $default  reduce using rule 49 (assignment_allow_blank)


State 154

   41 else_part: ELSE IF B_O condition . B_C block else_part

    B_C  shift, and go to state 157


State 155

   37 switch_block: CASE literal COLON block_code . switch_block

    CASE     shift, and go to state 132
    DEFAULT  shift, and go to state 133

    $default  reduce using rule 39 (switch_block)

    switch_block  go to state 158


State 156

   29 block_code: FOR B_O for_var_init EOL cond_allow_blank EOL assignment_blank B_C block block_code .

    $default  reduce using rule 29 (block_code)


State 157

   41 else_part: ELSE IF B_O condition B_C . block else_part

    C_O  shift, and go to state 31

    block  go to state 159


State 158

   37 switch_block: CASE literal COLON block_code switch_block .

    $default  reduce using rule 37 (switch_block)


State 159

   41 else_part: ELSE IF B_O condition B_C block . else_part

    ELSE  shift, and go to state 130

    $default  reduce using rule 40 (else_part)

    else_part  go to state 160


State 160

   41 else_part: ELSE IF B_O condition B_C block else_part .

    $default  reduce using rule 41 (else_part)
